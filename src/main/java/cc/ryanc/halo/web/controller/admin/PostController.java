package cc.ryanc.halo.web.controller.admin;

import cc.ryanc.halo.model.domain.Post;
import cc.ryanc.halo.model.domain.User;
import cc.ryanc.halo.model.dto.JsonResult;
import cc.ryanc.halo.model.dto.LogsRecord;
import cc.ryanc.halo.model.enums.BlogPropertiesEnum;
import cc.ryanc.halo.model.enums.PostStatusEnum;
import cc.ryanc.halo.model.enums.PostTypeEnum;
import cc.ryanc.halo.model.enums.ResultCodeEnum;
import cc.ryanc.halo.service.LogsService;
import cc.ryanc.halo.service.PostService;
import cc.ryanc.halo.utils.HaloUtils;
import cc.ryanc.halo.utils.LocaleMessageUtil;
import cc.ryanc.halo.utils.MarkdownUtils;
import cc.ryanc.halo.web.controller.core.BaseController;
import cn.hutool.core.util.RandomUtil;
import cn.hutool.core.util.StrUtil;
import cn.hutool.crypto.SecureUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.ServletRequestDataBinder;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import static org.springframework.data.domain.Sort.Direction.DESC;

import static cc.ryanc.halo.model.dto.HaloConst.OPTIONS;
import static cc.ryanc.halo.model.dto.HaloConst.USER_SESSION_KEY;

/**
 * <pre>
 *     å?Žå?°æ–‡ç« ç®¡ç?†æŽ§åˆ¶å™¨
 * </pre>
 *
 * @author : RYAN0UP
 * @date : 2017/12/10
 */
@Slf4j
@Controller
@RequestMapping(value = "/admin/posts")
public class PostController extends BaseController {

    @Autowired
    private PostService postService;

    @Autowired
    private LogsService logsService;

    @Autowired
    private HttpServletRequest request;

    @Autowired
    private LocaleMessageUtil localeMessageUtil;

    /**
     * åŽ»é™¤htmlï¼Œhtmå?Žç¼€ï¼Œä»¥å?Šå°†ç©ºæ ¼æ›¿æ?¢æˆ?-
     *
     * @param url url
     *
     * @return String
     */
    private static String urlFilter(String url) {
        if (null != url) {
            final boolean urlEndsWithHtmlPostFix = url.endsWith(".html") || url.endsWith(".htm");
            if (urlEndsWithHtmlPostFix) {
                return url.substring(0, url.lastIndexOf("."));
            }
        }
        return StrUtil.replace(url, " ", "-");
    }

    /**
     * å¤„ç?†å?Žå?°èŽ·å?–æ–‡ç« åˆ—è¡¨çš„è¯·æ±‚
     *
     * @param model model
     * @return æ¨¡æ?¿è·¯å¾„admin/admin_post
     */
    @GetMapping
    public String posts(Model model,
                        @RequestParam(value = "status", defaultValue = "0") Integer status,
                        @PageableDefault(sort = "postDate", direction = DESC) Pageable pageable) {
        final Page<Post> posts = postService.findPostByStatus(status, PostTypeEnum.POST_TYPE_POST.getDesc(), pageable);
        model.addAttribute("posts", posts);
        model.addAttribute("publishCount", postService.getCountByStatus(PostStatusEnum.PUBLISHED.getCode()));
        model.addAttribute("draftCount", postService.getCountByStatus(PostStatusEnum.DRAFT.getCode()));
        model.addAttribute("trashCount", postService.getCountByStatus(PostStatusEnum.RECYCLE.getCode()));
        model.addAttribute("status", status);
        return "admin/admin_post";
    }

    /**
     * æ¨¡ç³ŠæŸ¥è¯¢æ–‡ç« 
     *
     * @param model   Model
     * @param keyword keyword å…³é”®å­—
     * @return æ¨¡æ?¿è·¯å¾„admin/admin_post
     */
    @PostMapping(value = "/search")
    public String searchPost(Model model,
                             @RequestParam(value = "keyword") String keyword,
                             @PageableDefault(sort = "postId", direction = DESC) Pageable pageable) {
        try {
            Page<Post> posts = postService.searchPostsBy(keyword, PostTypeEnum.POST_TYPE_POST.getDesc(), PostStatusEnum.PUBLISHED.getCode(), pageable);
            model.addAttribute("posts", posts);
        } catch (Exception e) {
            log.error("æœªçŸ¥é”™è¯¯ï¼š{}", e.getMessage());
        }
        return "admin/admin_post";
    }<<<<<<< MINE
=======


    /**
     * Ã¥Â¤â€žÃ§?â€ Ã¥?Å½Ã¥?Â°Ã¨Å½Â·Ã¥?â€“Ã¦â€“â€¡Ã§Â«Â Ã¥Ë†â€”Ã¨Â¡Â¨Ã§Å¡â€žÃ¨Â¯Â·Ã¦Â±â€š
     *
     * @param model model
     * @param page  Ã¥Â½â€œÃ¥â€°?Ã©Â¡ÂµÃ§Â ?
     * @param size  Ã¦Â¯?Ã©Â¡ÂµÃ¦ËœÂ¾Ã§Â¤ÂºÃ§Å¡â€žÃ¦?Â¡Ã¦â€¢Â°
     *
     * @return Ã¦Â¨Â¡Ã¦?Â¿Ã¨Â·Â¯Ã¥Â¾â€žadmin/admin_post
     */
    
>>>>>>> YOURS
<<<<<<< MINE
=======


    /**
     * Ã¦Â¨Â¡Ã§Â³Å Ã¦Å¸Â¥Ã¨Â¯Â¢Ã¦â€“â€¡Ã§Â«Â 
     *
     * @param model   Model
     * @param keyword keyword Ã¥â€¦Â³Ã©â€?Â®Ã¥Â­â€”
     * @param page    page Ã¥Â½â€œÃ¥â€°?Ã©Â¡ÂµÃ§Â ?
     * @param size    size Ã¦Â¯?Ã©Â¡ÂµÃ¦ËœÂ¾Ã§Â¤ÂºÃ¦?Â¡Ã¦â€¢Â°
     *
     * @return Ã¦Â¨Â¡Ã¦?Â¿Ã¨Â·Â¯Ã¥Â¾â€žadmin/admin_post
     */
    
>>>>>>> YOURS


    /**
     * å¤„ç?†é¢„è§ˆæ–‡ç« çš„è¯·æ±‚
     *
     * @param postId æ–‡ç« ç¼–å?·
     * @param model  model
     *
     * @return æ¨¡æ?¿è·¯å¾„/themes/{theme}/post
     */
    @GetMapping(value = "/view")
    public String viewPost(@RequestParam("postId") Long postId, Model model) {
        final Optional<Post> post = postService.findByPostId(postId);
        model.addAttribute("post", post.orElse(new Post()));
        return this.render("post");
    }

    /**
     * å¤„ç?†è·³è½¬åˆ°æ–°å»ºæ–‡ç« é¡µé?¢
     *
     * @return æ¨¡æ?¿è·¯å¾„admin/admin_editor
     */
    @GetMapping(value = "/write")
    public String writePost() {
        return "admin/admin_post_new";
    }

    /**
     * è·³è½¬åˆ°ç¼–è¾‘æ–‡ç« é¡µé?¢
     *
     * @param postId æ–‡ç« ç¼–å?·
     * @param model  model
     *
     * @return æ¨¡æ?¿è·¯å¾„admin/admin_editor
     */
    @GetMapping(value = "/edit")
    public String editPost(@RequestParam("postId") Long postId, Model model) {
        final Optional<Post> post = postService.findByPostId(postId);
        model.addAttribute("post", post.orElse(new Post()));
        return "admin/admin_post_edit";
    }

    /**
     * æ·»åŠ æ–‡ç« 
     *
     * @param post     post
     * @param cateList åˆ†ç±»åˆ—è¡¨
     * @param tagList  æ ‡ç­¾
     * @param session  session
     */
    @PostMapping(value = "/save")
    @ResponseBody
    public JsonResult save(@ModelAttribute Post post,
                           @RequestParam("cateList") List<String> cateList,
                           @RequestParam("tagList") String tagList,
                           HttpSession session) {
        final User user = (User) session.getAttribute(USER_SESSION_KEY);
        try {
            post.setPostContent(MarkdownUtils.renderMarkdown(post.getPostContentMd()));
            post.setUser(user);
            post = postService.buildCategoriesAndTags(post, cateList, tagList);
            post.setPostUrl(urlFilter(post.getPostUrl()));
            if (StrUtil.isNotEmpty(post.getPostPassword())) {
                post.setPostPassword(SecureUtil.md5(post.getPostPassword()));
            }
            //Ã¥Â½â€œÃ¦Â²Â¡Ã¦Å“â€°Ã©â‚¬â€°Ã¦â€¹Â©Ã¦â€“â€¡Ã§Â«Â Ã§Â¼Â©Ã§â€¢Â¥Ã¥â€ºÂ¾Ã§Å¡â€žÃ¦â€”Â¶Ã¥â‚¬â„¢Ã¯Â¼Å’Ã¨â€¡ÂªÃ¥Å Â¨Ã¥Ë†â€ Ã©â€¦?Ã¤Â¸â‚¬Ã¥Â¼Â Ã¥â€ â€¦Ã§Â½Â®Ã§Å¡â€žÃ§Â¼Â©Ã§â€¢Â¥Ã¥â€ºÂ¾
            if (StrUtil.equals(post.getPostThumbnail(), BlogPropertiesEnum.DEFAULT_THUMBNAIL.getProp())) {
                post.setPostThumbnail("/static/halo-frontend/images/thumbnail/thumbnail-" + RandomUtil.randomInt(1, 11) + ".jpg");
            }
            postService.save(post);
            logsService.save(LogsRecord.PUSH_POST, post.getPostTitle(), request);
            return new JsonResult(ResultCodeEnum.SUCCESS.getCode(), localeMessageUtil.getMessage("code.admin.common.save-success"));
        } catch (Exception e) {
            log.error("Save article failed: {}", e.getMessage());
            e.printStackTrace();
            return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage("code.admin.common.save-failed"));
        }
    }

    /**
     * Ã¦â€ºÂ´Ã¦â€“Â°
     *
     * @param post     post
     * @param cateList Ã¥Ë†â€ Ã§Â±Â»Ã§â€ºÂ®Ã¥Â½â€¢
     * @param tagList  Ã¦Â â€¡Ã§Â­Â¾
<<<<<<< MINE
=======
     * @param session  session
     *
>>>>>>> YOURS
     * @return JsonResult
     */
    @PostMapping(value = "/update")
    @ResponseBody
    public JsonResult update(@ModelAttribute Post post,
                             @RequestParam("cateList") List<String> cateList,
                             @RequestParam("tagList") String tagList) {
        //old data
        final Post oldPost = postService.findByPostId(post.getPostId()).orElse(new Post());
        post.setPostViews(oldPost.getPostViews());
        post.setPostContent(MarkdownUtils.renderMarkdown(post.getPostContentMd()));
        post.setUser(oldPost.getUser());
        if (null == post.getPostDate()) {
            post.setPostDate(new Date());
        }
        post = postService.buildCategoriesAndTags(post, cateList, tagList);
        if (StrUtil.isNotEmpty(post.getPostPassword())) {
            post.setPostPassword(SecureUtil.md5(post.getPostPassword()));
        }
        //Ã¥Â½â€œÃ¦Â²Â¡Ã¦Å“â€°Ã©â‚¬â€°Ã¦â€¹Â©Ã¦â€“â€¡Ã§Â«Â Ã§Â¼Â©Ã§â€¢Â¥Ã¥â€ºÂ¾Ã§Å¡â€žÃ¦â€”Â¶Ã¥â‚¬â„¢Ã¯Â¼Å’Ã¨â€¡ÂªÃ¥Å Â¨Ã¥Ë†â€ Ã©â€¦?Ã¤Â¸â‚¬Ã¥Â¼Â Ã¥â€ â€¦Ã§Â½Â®Ã§Å¡â€žÃ§Â¼Â©Ã§â€¢Â¥Ã¥â€ºÂ¾
        if (StrUtil.equals(post.getPostThumbnail(), BlogPropertiesEnum.DEFAULT_THUMBNAIL.getProp())) {
            post.setPostThumbnail("/static/halo-frontend/images/thumbnail/thumbnail-" + RandomUtil.randomInt(1, 11) + ".jpg");
        }
        post = postService.save(post);
        if (null != post) {
            return new JsonResult(ResultCodeEnum.SUCCESS.getCode(), localeMessageUtil.getMessage("code.admin.common.update-success"));
        } else {
            return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage("code.admin.common.update-failed"));
        }
    }

    /**
     * å¤„ç?†ç§»è‡³å›žæ”¶ç«™çš„è¯·æ±‚
     *
     * @param postId æ–‡ç« ç¼–å?·
     *
     * @return é‡?å®šå?‘åˆ°/admin/posts
     */
    @GetMapping(value = "/throw")
    public String moveToTrash(@RequestParam("postId") Long postId, @RequestParam("status") Integer status) {
        try {
            postService.updatePostStatus(postId, PostStatusEnum.RECYCLE.getCode());
            log.info("Article number {} has been moved to the recycle bin", postId);
        } catch (Exception e) {
            log.error("Deleting article to recycle bin failed: {}", e.getMessage());
        }
        return "redirect:/admin/posts?status=" + status;
    }

    /**
     * å¤„ç?†æ–‡ç« ä¸ºå?‘å¸ƒçš„çŠ¶æ€?
     *
     * @param postId æ–‡ç« ç¼–å?·
     *
     * @return é‡?å®šå?‘åˆ°/admin/posts
     */
    @GetMapping(value = "/revert")
    public String moveToPublish(@RequestParam("postId") Long postId,
                                @RequestParam("status") Integer status) {
        try {
            postService.updatePostStatus(postId, PostStatusEnum.PUBLISHED.getCode());
            log.info("Article number {} has been changed to release status", postId);
        } catch (Exception e) {
            log.error("Publishing article failed: {}", e.getMessage());
        }
        return "redirect:/admin/posts?status=" + status;
    }

    /**
     * å¤„ç?†åˆ é™¤æ–‡ç« çš„è¯·æ±‚
     *
     * @param postId æ–‡ç« ç¼–å?·
     *
     * @return é‡?å®šå?‘åˆ°/admin/posts
     */
    @GetMapping(value = "/remove")
    public String removePost(@RequestParam("postId") Long postId, @RequestParam("postType") String postType) {
        try {
            final Optional<Post> post = postService.findByPostId(postId);
            postService.remove(postId);
            logsService.save(LogsRecord.REMOVE_POST, post.get().getPostTitle(), request);
        } catch (Exception e) {
            log.error("Delete article failed: {}", e.getMessage());
        }
        if (StrUtil.equals(PostTypeEnum.POST_TYPE_POST.getDesc(), postType)) {
            return "redirect:/admin/posts?status=2";
        }
        return "redirect:/admin/page";
    }

    /**
     * æ›´æ–°æ‰€æœ‰æ‘˜è¦?
     *
     * @param postSummary æ–‡ç« æ‘˜è¦?å­—æ•°
     *
     * @return JsonResult
     */
    @GetMapping(value = "/updateSummary")
    @ResponseBody
    public JsonResult updateSummary(@RequestParam("postSummary") Integer postSummary) {
        try {
            postService.updateAllSummary(postSummary);
        } catch (Exception e) {
            log.error("Update summary failed: {}", e.getMessage());
            e.printStackTrace();
            return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage("code.admin.common.update-failed"));
        }
        return new JsonResult(ResultCodeEnum.SUCCESS.getCode(), localeMessageUtil.getMessage("code.admin.common.update-success"));
    }

    /**
     * éªŒè¯?æ–‡ç« è·¯å¾„æ˜¯å?¦å·²ç»?å­˜åœ¨
     *
     * @param postUrl æ–‡ç« è·¯å¾„
     *
     * @return JsonResult
     */
    @GetMapping(value = "/checkUrl")
    @ResponseBody
    public JsonResult checkUrlExists(@RequestParam("postUrl") String postUrl) {
        postUrl = urlFilter(postUrl);
        final Post post = postService.findByPostUrl(postUrl, PostTypeEnum.POST_TYPE_POST.getDesc());
        if (null != post) {
            return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage("code.admin.common.url-is-exists"));
        }
        return new JsonResult(ResultCodeEnum.SUCCESS.getCode(), "");
    }

    /**
     * å°†æ‰€æœ‰æ–‡ç« æŽ¨é€?åˆ°ç™¾åº¦
     *
     * @param baiduToken baiduToken
     *
     * @return JsonResult
     */
    @GetMapping(value = "/pushAllToBaidu")
    @ResponseBody
    public JsonResult pushAllToBaidu(@RequestParam("baiduToken") String baiduToken) {
        if (StrUtil.isBlank(baiduToken)) {
            return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage("code.admin.post.no-baidu-token"));
        }
        final String blogUrl = OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp());
        final List<Post> posts = postService.findAll(PostTypeEnum.POST_TYPE_POST.getDesc());
        final StringBuilder urls = new StringBuilder();
        for (Post post : posts) {
            urls.append(blogUrl);
            urls.append("/archives/");
            urls.append(post.getPostUrl());
            urls.append("\n");
        }
        final String result = HaloUtils.baiduPost(blogUrl, baiduToken, urls.toString());
        if (StrUtil.isEmpty(result)) {
            return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage("code.admin.post.push-to-baidu-failed"));
        }
        return new JsonResult(ResultCodeEnum.SUCCESS.getCode(), localeMessageUtil.getMessage("code.admin.post.push-to-baidu-success"));
    }

    @InitBinder
    public void initBinder(ServletRequestDataBinder binder) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        binder.registerCustomEditor(Date.class, new CustomDateEditor(sdf, true));
    }
}