package cc.ryanc.halo.web.controller.front;

import cc.ryanc.halo.model.domain.Comment;
import cc.ryanc.halo.model.domain.Post;
import cc.ryanc.halo.model.domain.Tag;
import cc.ryanc.halo.model.dto.ListPage;
import cc.ryanc.halo.model.enums.*;
import cc.ryanc.halo.service.CommentService;
import cc.ryanc.halo.service.PostService;
import cc.ryanc.halo.utils.CommentUtil;
import cc.ryanc.halo.web.controller.core.BaseController;
import cn.hutool.core.collection.CollUtil;
import cn.hutool.core.util.PageUtil;
import cn.hutool.core.util.StrUtil;
import cn.hutool.crypto.SecureUtil;
import cn.hutool.extra.servlet.ServletUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.SortDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static org.springframework.data.domain.Sort.Direction.DESC;

import static cc.ryanc.halo.model.dto.HaloConst.OPTIONS;

/**
 * <pre>
 *     å‰?å?°æ–‡ç« å½’æ¡£æŽ§åˆ¶å™¨
 * </pre>
 *
 * @author : RYAN0UP
 * @date : 2018/4/26
 */
@Slf4j
@Controller
@RequestMapping(value = "/archives")
public class FrontArchiveController extends BaseController {

    private static final String POSTS_CACHE_NAME = "posts";

    @Autowired
    private PostService postService;

    @Autowired
    private CommentService commentService;

    /**
     * æ–‡ç« å½’æ¡£
     *
     * @param model model
     *
     * @return æ¨¡æ?¿è·¯å¾„
     */
    @GetMapping
    public String archives(Model model) {
        return this.archives(model, 1, Sort.by(DESC, "postDate"));
    }

    /**
     * æ–‡ç« å½’æ¡£åˆ†é¡µ
     *
     * @param model model
     * @param page  page å½“å‰?é¡µç ?
     * @return æ¨¡æ?¿è·¯å¾„/themes/{theme}/archives
     */
    @GetMapping(value = "page/{page}")
    public String archives(Model model,
                           @PathVariable(value = "page") Integer page,
                           @SortDefault(sort = "postDate", direction = DESC) Sort sort) {
        //æ‰€æœ‰æ–‡ç« æ•°æ?®ï¼Œåˆ†é¡µï¼Œmaterialä¸»é¢˜é€‚ç”¨
        final Pageable pageable = PageRequest.of(page - 1, 5, sort);
        final Page<Post> posts = postService.findPostByStatus(PostStatusEnum.PUBLISHED.getCode(), PostTypeEnum.POST_TYPE_POST.getDesc(), pageable);
        if (null == posts) {
            return this.renderNotFound();
        }
        model.addAttribute("is_archives", true);
        model.addAttribute("posts", posts);
        return this.render("archives");
    }<<<<<<< MINE
=======


    /**
     * Ã¦â€“â€¡Ã§Â«Â Ã¥Â½â€™Ã¦Â¡Â£Ã¥Ë†â€ Ã©Â¡Âµ
     *
     * @param model model
     * @param page  page Ã¥Â½â€œÃ¥â€°?Ã©Â¡ÂµÃ§Â ?
     *
     * @return Ã¦Â¨Â¡Ã¦?Â¿Ã¨Â·Â¯Ã¥Â¾â€ž/themes/{theme}/archives
     */
    
>>>>>>> YOURS


    /**
     * æ–‡ç« å½’æ¡£ï¼Œæ ¹æ?®å¹´æœˆ
     *
     * @param model model
     * @param year  year å¹´ä»½
     * @param month month æœˆä»½
     *
     * @return æ¨¡æ?¿è·¯å¾„/themes/{theme}/archives
     */
    @GetMapping(value = "{year}/{month}")
    public String archives(Model model,
                           @PathVariable(value = "year") String year,
                           @PathVariable(value = "month") String month) {
        final Page<Post> posts = postService.findPostByYearAndMonth(year, month, null);
        if (null == posts) {
            return this.renderNotFound();
        }
        model.addAttribute("is_archives", true);
        model.addAttribute("posts", posts);
        return this.render("archives");
    }

    /**
     * æ¸²æŸ“æ–‡ç« è¯¦æƒ…
     *
     * @param postUrl æ–‡ç« è·¯å¾„å??
     * @param model   model
     *
     * @return æ¨¡æ?¿è·¯å¾„/themes/{theme}/post
     */
    @GetMapping(value = "{postUrl}")
    public String getPost(@PathVariable String postUrl,
                          @RequestParam(value = "cp", defaultValue = "1") Integer cp,
                          HttpServletRequest request,
                          Model model) {
        final Post post = postService.findByPostUrl(postUrl, PostTypeEnum.POST_TYPE_POST.getDesc());
        if (null == post || !post.getPostStatus().equals(PostStatusEnum.PUBLISHED.getCode())) {
            return this.renderNotFound();
        }
        //Ã¨Å½Â·Ã¥Â¾â€”Ã¥Â½â€œÃ¥â€°?Ã¦â€“â€¡Ã§Â«Â Ã§Å¡â€žÃ¥?â€˜Ã¥Â¸Æ’Ã¦â€”Â¥Ã¦Å“Å¸
        final Date postDate = post.getPostDate();
        final Post prePost = postService.getPrePost(postDate);
        final Post nextPost = postService.getNextPost(postDate);
        if (null != prePost) {
            //Ã¥â€¦Â¼Ã¥Â®Â¹Ã¨â‚¬?Ã§â€°Ë†Ã¦Å“Â¬Ã¤Â¸Â»Ã©Â¢Ëœ
            model.addAttribute("beforePost", prePost);
            model.addAttribute("prePost", prePost);
        }
        if (null != nextPost) {
            //Ã¥â€¦Â¼Ã¥Â®Â¹Ã¨â‚¬?Ã§â€°Ë†Ã¦Å“Â¬Ã¤Â¸Â»Ã©Â¢Ëœ
            model.addAttribute("afterPost", nextPost);
            model.addAttribute("nextPost", nextPost);
        }
        List<Comment> comments = null;
        if (StrUtil.equals(OPTIONS.get(BlogPropertiesEnum.NEW_COMMENT_NEED_CHECK.getProp()), TrueFalseEnum.TRUE.getDesc()) || OPTIONS.get(BlogPropertiesEnum.NEW_COMMENT_NEED_CHECK.getProp()) == null) {
            comments = commentService.findCommentsByPostAndCommentStatus(post, CommentStatusEnum.PUBLISHED.getCode());
        } else {
            comments = commentService.findCommentsByPostAndCommentStatusNot(post, CommentStatusEnum.RECYCLE.getCode());
        }
        //Ã¨Å½Â·Ã¥?â€“Ã¦â€“â€¡Ã§Â«Â Ã§Å¡â€žÃ¦Â â€¡Ã§Â­Â¾Ã§â€?Â¨Ã¤Â½Å“keywords
        final List<Tag> tags = post.getTags();
        final List<String> tagWords = new ArrayList<>();
        if (tags != null) {
            for (Tag tag : tags) {
                tagWords.add(tag.getTagName());
            }
        }
        //Ã©Â»ËœÃ¨Â®Â¤Ã¦ËœÂ¾Ã§Â¤Âº10Ã¦?Â¡
        int size = 10;
        //Ã¨Å½Â·Ã¥?â€“Ã¦Â¯?Ã©Â¡ÂµÃ¨Â¯â€žÃ¨Â®ÂºÃ¦?Â¡Ã¦â€¢Â°
        if (StrUtil.isNotBlank(OPTIONS.get(BlogPropertiesEnum.INDEX_COMMENTS.getProp()))) {
            size = Integer.parseInt(OPTIONS.get(BlogPropertiesEnum.INDEX_COMMENTS.getProp()));
        }
        //Ã¨Â¯â€žÃ¨Â®ÂºÃ¥Ë†â€ Ã©Â¡Âµ
        final ListPage<Comment> commentsPage = new ListPage<Comment>(CommentUtil.getComments(comments), cp, size);
        final int[] rainbow = PageUtil.rainbow(cp, commentsPage.getTotalPage(), 3);
        model.addAttribute("is_post", true);
        model.addAttribute("comments", commentsPage);
        model.addAttribute("commentsCount", comments.size());
        model.addAttribute("rainbow", rainbow);
        model.addAttribute("tagWords", CollUtil.join(tagWords, ","));
        postService.cacheViews(post.getPostId());

        //Ã¥Ë†Â¤Ã¦â€“Â­Ã¦â€“â€¡Ã§Â«Â Ã¦ËœÂ¯Ã¥?Â¦Ã¦Å“â€°Ã¥Å Â Ã¥Â¯â€ 
        if (StrUtil.isNotEmpty(post.getPostPassword())) {
            Cookie cookie = ServletUtil.getCookie(request, "halo-post-password-" + post.getPostId());
            if (null == cookie) {
                post.setPostSummary("Ã¨Â¯Â¥Ã¦â€“â€¡Ã§Â«Â Ã¤Â¸ÂºÃ¥Å Â Ã¥Â¯â€ Ã¦â€“â€¡Ã§Â«Â ");
                post.setPostContent("<form id=\"postPasswordForm\" method=\"post\" action=\"/archives/verifyPostPassword\"><p>Ã¨Â¯Â¥Ã¦â€“â€¡Ã§Â«Â Ã¤Â¸ÂºÃ¥Å Â Ã¥Â¯â€ Ã¦â€“â€¡Ã§Â«Â Ã¯Â¼Å’Ã¨Â¾â€œÃ¥â€¦Â¥Ã¦Â­Â£Ã§Â¡Â®Ã§Å¡â€žÃ¥Â¯â€ Ã§Â ?Ã¥?Â³Ã¥?Â¯Ã¨Â®Â¿Ã©â€”Â®Ã£â‚¬â€š</p><input type=\"hidden\" id=\"postId\" name=\"postId\" value=\"" + post.getPostId() + "\"> <input type=\"password\" id=\"postPassword\" name=\"postPassword\"> <input type=\"submit\" id=\"passwordSubmit\" value=\"Ã¦??Ã¤ÂºÂ¤\"></form>");
            }
        }
        model.addAttribute("post", post);
        return this.render("post");
    }

    /**
     * éªŒè¯?æ–‡ç« å¯†ç ?
     *
     * @param postId       postId
     * @param postPassword postPassword
     * @param response     response
     *
     * @return String
     */
    @PostMapping(value = "/verifyPostPassword")
    @CacheEvict(value = POSTS_CACHE_NAME, allEntries = true, beforeInvocation = true)
    public String verifyPostPassword(@RequestParam(value = "postId") Long postId,
                                     @RequestParam(value = "postPassword") String postPassword,
                                     HttpServletResponse response) {
        final Post post = postService.findByPostId(postId, PostTypeEnum.POST_TYPE_POST.getDesc());
        if (null == post) {
            return this.renderNotFound();
        }
        if (SecureUtil.md5(postPassword).equals(post.getPostPassword())) {
            ServletUtil.addCookie(response, "halo-post-password-" + post.getPostId(), SecureUtil.md5(postPassword));
        }
        return "redirect:/archives/" + post.getPostUrl();
    }
}